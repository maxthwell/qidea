#解二维泊松方程
什么是泊松方程？
泊松方程的一般表达式为：
	Laplace(U(x,y))=f(x,y)
	二维Laplace算子的表达式为:
	Laplace(U) => Uxx+Uyy

Qidea:
	opencv作为一个图像处理库，包含有对图像进行Laplace操作的方法。
	把U(x,y)看作原始图像，则f(x,y)就是它进行Lalace变换后的图像，理论上可以根据傅里叶变换下拉普拉斯算子的性质计算出其所有的频率成分。
	但是一般数字图像经过拉普拉斯变换，会因为浮点数的精度原因损失一定的低频成分，甚至当像素达到100万时，最高频的成分的缩放因子已经是最低频的100万倍，如果再经过有损压缩，那么低频成分将损失殆尽。
	在物理学上这个方程经常用来求解电荷密度呈f(x,y)形式的静电场。其中U(x,y)为静电场的势能，如果想让U(x,y)有唯一解，还必须知道其边界条件。
	那么拉普拉斯算子有没有逆算子呢？
	分析一下图像处理中的拉普拉斯算子,实际上一个高度对称的卷积核，而且其权重之核为0，该核的意义是求周边值与中心的差异。
	[0   1/4   0	  [ 0   1/4  0    [0  0  0
	 1/4  -1  1/4  =   1/4   0  1/4 -  0  1  0
	 0   1/4   0]       0   1/4  0]    0  0  0]

	所以拉普拉斯算子可以分成两部分，一部分是平均插值滤波核Mean，另一部分是不变变换I：
		Laplace(U)=Mean(U) - I(U)
		根据上面的式子，构造迭代：
		I(U_i+1) = Mean(U_i)-Laplace(U)
		即：
		U_i+1 = Mean(U_i)-f(x,y)
		令U_0为一个随机的图像场开始迭代
	以上迭代式如果收敛，那么一定会收敛到满足泊松方程的一个图像，不一定是原图像，因为拉普拉斯变换导致低频信息损失。
	以上迭代都是在修复图像的高频信息，对低频成分几乎无影响。那么我们可以令U_0为原始图像的高斯模糊图像，这样U_0拥有大量的低频细节而缺失的高频细节通过迭代式进行修复后，最终得到的图像应该与原始图像误差很小。
	
	
	
	
	

